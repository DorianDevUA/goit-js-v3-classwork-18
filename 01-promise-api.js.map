{"version":3,"file":"01-promise-api.js","sources":["../src/js/01-promise-api.js"],"sourcesContent":["import '../css/style.css';\n/*\n * Создание промиса\n *  - Класс Promise\n *  - resolve\n *  - reject\n *  - Promise.prototype.then(onResolve, onReject)\n */\n\nconst promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n  // if (canFulfill) {\n  //   resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n  // }\n\n  // reject('Промис выполнился с ошибкой (отклонён, rejected)');\n});\n\nconsole.log('MyPromise', promise);\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n//     }\n\n//     reject('Промис выполнился с ошибкой (отклонён, rejected)');\n//   }, 1000);\n// });\n\n// // promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//   console.log('onFulfilled -> onFulfilled');\n//   console.log(`✅ ${result}`);\n// }\n\n// function onRejected(error) {\n//   console.log('onRejected -> onRejected');\n//   console.log(`❌ ${error}`);\n// }\n\n// /*\n//  * Цепочки промисов (chaining)\n//  * Promise.prototype.catch(error)\n//  * Promise.prototype.finally()\n//  */\n\n// promise\n//   .then(onFulfilled)\n//   .then(x => {\n//     console.log(x);\n\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n//   .catch(error => console.log(error))\n//   .finally(() => console.log('Я буду выполнен в любом случае'));\n"],"names":["promise","resolve","reject"],"mappings":"mCASA,MAAMA,EAAU,IAAI,QAAQ,CAACC,EAASC,IAAW,CAOjD,CAAC,EAED,QAAQ,IAAI,YAAaF,CAAO"}